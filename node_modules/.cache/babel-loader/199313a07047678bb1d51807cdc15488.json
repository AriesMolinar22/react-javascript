{"ast":null,"code":"var _jsxFileName = \"/Users/ariesmolinar/Desktop/WD12P/applicatons/react-javascript/src/pages/Triangle.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Triangle() {\n  _s();\n\n  const [input, setInput] = useState(\"\");\n\n  const generateIsoscelesTriangle = () => {\n    // Check if letter or null\n    if (isNaN(input) || !input) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"col-12 w-100 text-primary\",\n        children: \"Please enter a Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this);\n    } // input = 3\n\n\n    let total = \"\"; // total = \" * * *\"\n\n    const rightTriangle = []; // rightTriangle = [\" *\", \" * *\", \" * * *\"]\n\n    for (let i = 1; i <= input; i++) {\n      total = total.concat(\" *\");\n      rightTriangle.push(total);\n    } // const reverseRightTriangle = rightTriangle.slice().reverse();\n    // rightTriangle.slice().reverse() = [\" * * *\", \" * *\", \" *\"]\n    // rightTriangle.slice().reverse().slice(1) = [\" * *\", \" *\"]\n    // [].concat(rightTriangle, reverseRightTriangle) = [\" *\", \" * *\", \" * * *\", \" * *\", \" *\"]\n\n\n    const fullTriangle = [].concat(rightTriangle, rightTriangle.slice().reverse().slice(1));\n    return fullTriangle.map((data, index) => /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"col-12 w-100 text-primary\",\n      children: data\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container p-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 w-50 pb-5\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"w-100 lead\",\n          placeholder: \"Input\",\n          value: input,\n          onChange: event => {\n            setInput(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), generateIsoscelesTriangle()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Triangle, \"RL+Zbs2TIka0YpcBOJptmHqCgYA=\");\n\n_c = Triangle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Triangle\");","map":{"version":3,"names":["React","useState","Triangle","input","setInput","generateIsoscelesTriangle","isNaN","total","rightTriangle","i","concat","push","fullTriangle","slice","reverse","map","data","index","event","target","value"],"sources":["/Users/ariesmolinar/Desktop/WD12P/applicatons/react-javascript/src/pages/Triangle.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nexport default function Triangle() {\n  const [input, setInput] = useState(\"\");\n\n  const generateIsoscelesTriangle = () => {\n    // Check if letter or null\n    if (isNaN(input) || !input) {\n      return (\n        <h1 className=\"col-12 w-100 text-primary\">Please enter a Number</h1>\n      );\n    }\n\n    // input = 3\n    let total = \"\";\n    // total = \" * * *\"\n    const rightTriangle = [];\n    // rightTriangle = [\" *\", \" * *\", \" * * *\"]\n    for (let i = 1; i <= input; i++) {\n      total = total.concat(\" *\");\n      rightTriangle.push(total);\n    }\n\n    // const reverseRightTriangle = rightTriangle.slice().reverse();\n    // rightTriangle.slice().reverse() = [\" * * *\", \" * *\", \" *\"]\n    // rightTriangle.slice().reverse().slice(1) = [\" * *\", \" *\"]\n    // [].concat(rightTriangle, reverseRightTriangle) = [\" *\", \" * *\", \" * * *\", \" * *\", \" *\"]\n\n    const fullTriangle = [].concat(\n      rightTriangle,\n      rightTriangle.slice().reverse().slice(1)\n    );\n\n    return fullTriangle.map((data, index) => (\n      <h1 className=\"col-12 w-100 text-primary\" key={index}>\n        {data}\n      </h1>\n    ));\n  };\n\n  return (\n    <div className=\"container p-5\">\n      <div className=\"row\">\n        <div className=\"col-12 w-50 pb-5\">\n          <input\n            type=\"text\"\n            className=\"w-100 lead\"\n            placeholder=\"Input\"\n            value={input}\n            onChange={(event) => {\n              setInput(event.target.value);\n            }}\n          />\n        </div>\n        {generateIsoscelesTriangle()}\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,eAAe,SAASC,QAAT,GAAoB;EAAA;;EACjC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,EAAD,CAAlC;;EAEA,MAAMI,yBAAyB,GAAG,MAAM;IACtC;IACA,IAAIC,KAAK,CAACH,KAAD,CAAL,IAAgB,CAACA,KAArB,EAA4B;MAC1B,oBACE;QAAI,SAAS,EAAC,2BAAd;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF;IAGD,CANqC,CAQtC;;;IACA,IAAII,KAAK,GAAG,EAAZ,CATsC,CAUtC;;IACA,MAAMC,aAAa,GAAG,EAAtB,CAXsC,CAYtC;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIN,KAArB,EAA4BM,CAAC,EAA7B,EAAiC;MAC/BF,KAAK,GAAGA,KAAK,CAACG,MAAN,CAAa,IAAb,CAAR;MACAF,aAAa,CAACG,IAAd,CAAmBJ,KAAnB;IACD,CAhBqC,CAkBtC;IACA;IACA;IACA;;;IAEA,MAAMK,YAAY,GAAG,GAAGF,MAAH,CACnBF,aADmB,EAEnBA,aAAa,CAACK,KAAd,GAAsBC,OAAtB,GAAgCD,KAAhC,CAAsC,CAAtC,CAFmB,CAArB;IAKA,OAAOD,YAAY,CAACG,GAAb,CAAiB,CAACC,IAAD,EAAOC,KAAP,kBACtB;MAAI,SAAS,EAAC,2BAAd;MAAA,UACGD;IADH,GAA+CC,KAA/C;MAAA;MAAA;MAAA;IAAA,QADK,CAAP;EAKD,CAjCD;;EAmCA,oBACE;IAAK,SAAS,EAAC,eAAf;IAAA,uBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBACE;QAAK,SAAS,EAAC,kBAAf;QAAA,uBACE;UACE,IAAI,EAAC,MADP;UAEE,SAAS,EAAC,YAFZ;UAGE,WAAW,EAAC,OAHd;UAIE,KAAK,EAAEd,KAJT;UAKE,QAAQ,EAAGe,KAAD,IAAW;YACnBd,QAAQ,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAR;UACD;QAPH;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF,EAYGf,yBAAyB,EAZ5B;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAkBD;;GAxDuBH,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}